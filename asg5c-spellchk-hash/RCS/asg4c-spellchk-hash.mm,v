head	1.22;
access;
symbols;
locks;
comment	@.\" @;


1.22
date	2014.03.06.03.30.29;	author -;	state -;
branches;
next	1.21;

1.21
date	2014.03.06.03.30.00;	author -;	state -;
branches;
next	1.20;

1.20
date	2014.03.06.03.29.22;	author -;	state -;
branches;
next	1.19;

1.19
date	2014.03.06.03.28.45;	author -;	state -;
branches;
next	1.18;

1.18
date	2014.03.06.03.27.52;	author -;	state -;
branches;
next	1.17;

1.17
date	2014.03.06.03.26.39;	author -;	state -;
branches;
next	1.16;

1.16
date	2014.02.22.01.56.49;	author -;	state -;
branches;
next	1.15;

1.15
date	2014.02.22.00.45.09;	author -;	state -;
branches;
next	1.14;

1.14
date	2013.05.23.22.40.38;	author -;	state -;
branches;
next	1.13;

1.13
date	2013.05.23.22.38.43;	author -;	state -;
branches;
next	1.12;

1.12
date	2013.05.22.19.12.59;	author -;	state -;
branches;
next	1.11;

1.11
date	2013.05.22.02.56.26;	author -;	state -;
branches;
next	1.10;

1.10
date	2013.05.22.02.54.18;	author -;	state -;
branches;
next	1.9;

1.9
date	2013.05.22.02.52.53;	author -;	state -;
branches;
next	1.8;

1.8
date	2013.05.22.02.51.17;	author -;	state -;
branches;
next	1.7;

1.7
date	2013.05.22.02.44.38;	author -;	state -;
branches;
next	1.6;

1.6
date	2013.05.22.02.33.54;	author -;	state -;
branches;
next	1.5;

1.5
date	2013.02.22.20.53.01;	author -;	state -;
branches;
next	1.4;

1.4
date	2012.11.17.05.24.29;	author -;	state -;
branches;
next	1.3;

1.3
date	2012.11.17.05.23.43;	author -;	state -;
branches;
next	1.2;

1.2
date	2012.11.17.02.06.09;	author -;	state -;
branches;
next	1.1;

1.1
date	2012.11.17.02.05.56;	author -;	state -;
branches;
next	;


desc
@@


1.22
log
@-
@
text
@.so Tmac.mm-etc
.if t .Newcentury-fonts
.INITR* \n[.F]
.SIZE 12
.TITLE CMPS-012B Winter\~2014 Program\~5 "Hashing and Spell Checking"
.RCS "$Id: asg4c-spellchk-hash.mm,v 1.21 2014-03-05 19:30:00-08 - - $"
.PWD
.URL
.GETST* SPELLCHEQUER Figure_SPELLCHEQUER
.GETST* YYLEX Figure_YYLEX
.EQ
delim $$
.EN
.H 1 "Overview"
In this assignment you will implement a spelling checker that uses a
hash table to look up words in a dictionary.
Collision resolution will be done by separate chaining.
A scanner generated by
.V= flex
will be used to extract words form the files to be checked.
.H 1 "Program specification"
We present the program in the form of a Unix 
.V= man (1)
page.
.SH=BVL
.MANPAGE=LI "NAME"
spellchk \[em] spell check some files based on dictionary words
.MANPAGE=LI "SYNOPSIS"
.V= spellchk
.=V \|[ -nxy ]
.=V \|[ -d
.IR dictionary ]
.=V \|[ -@@
.IR debugflags ]
.RI \|[ filename \|.\|.\|.]
.MANPAGE=LI "DESCRIPTION"
This program examines files for correct spell checking.
Some number of dictionaries are read in, including
the default dictionary,
plus any other auxiliary dictionaries.
then each file is read, and a report of any incorrectly spelled words
is made.
.MANPAGE=LI "OPTIONS"
Options are scanned using
.V= getopt (3c),
and are subject to its restrictions and conventions.
It is an error if no dictionaries are specified.
.VL \n[Pi]
.MANOPT=LI -d dictionary
The specified dictionary is loaded and used in addition to the default
dictionary.
This is optional unless
.V= -n
is used.
.MANOPT=LI -n
The default special dictionary
is excluded and only explicitly specified dictionaries are used.
.MANOPT=LI -x
Debug statistics about the hash table are dumped.
If the
.V= -x
option is given more than once,
the entire hash table is dumped.
The files to be spell checked are ignored if this option is specified.
.MANOPT=LI -y
Turns on the scanner's debug flag.
.MANOPT=LI -@@ debugflags
Turns on debugging flags for the
.V= DEBUGF
macro.
The option
.V= -@@@@
turns on all debug flags.
.LE
.MANPAGE=LI "OPERANDS"
Each operand is the name of file whose words are to be checked for
spelling errors.
A word is any sequence of letters and digits, possibly with the
characters ampersand
.=V ( & ),
apostrophe
.=V ( ' ),
hyphen
.=V ( - ),
or period
.=V ( . )
embedded with the word.
If a filename is specified as a minus sign
.=V ( - ),
it causes
.V= stdin
it be read at that point.
If no filenames are specified,
.V= stdin
is spell checked.
.MANPAGE=LI "EXIT STATUS"
.VL \n[Pi]
.LI 0
No errors nor misspelled words were detected.
.LI 1
One or more misspelled words were detected, but there were no errors.
.LI 2
One or more errors were detected and error messages were printed.
.LE
.MANPAGE=LI "FILES"
.VL \n[Pi]
.MANOPT=LI /afs/cats.ucsc.edu/courses/cmps012b-wm/usr/dict/words
.br
Contains the default dictionary.
.LE
.MANPAGE=LI "BUGS"
Standard spell-checking algorithms for variations on words as to
number and tense are not performed.
In any case, poems like the one in
Figure \*[Figure_SPELLCHEQUER] are likely to confuse most spelling
checkers.
.LE
.de poem-column1
.nf
.P
Eye halve a spelling chequer
It came with my pea sea
It plainly marques four my revue
Miss steaks eye kin knot sea
.P
Eye strike a quay and type a word
And weight four it two say
Weather eye am wrong oar rite
It shows me strait a weigh
..
.de poem-column2
.nf
.P
As soon as a mist ache is maid
It nose bee fore two long
And eye can put the error rite
Its rare lea ever wrong
.P
Eye have run this poem threw it
Eye am shore your pleased two no
Its letter perfect all the weigh
My chequer tolled me sew.
..
.DF CB
.ie t \{.\"
.TS
box tab(|); l lfI lfI l.
.SP
|T{
.poem-column1
T}|T{
.poem-column2
T}
.SP
.TE
.\}
.el \{.\"
.poem-column1
.poem-column2
.\}
.FG "Test file for \f[CB]spellchk\f[R]" "" 0 SPELLCHEQUER
\&
.DE
.DF L
.TS
allbox tab(|); lfCB lw(334p).
FILE *yyin;|T{
.fi
Is the file from which
.V= yylex
reads its input.
It must be opened before calling
.V= yylex
to read any file.
If it is not
.V= stdin ,
then it should be closed when 
.V= yylex 
is done with the file.
T}
char *yytext;|T{
.fi
Whenever
.V= yylex
returns from scanning,
this variable points into its buffer at the word just recognized.
T}
int yy_flex_debug;|T{
.fi
This is a debug flag which puts
.V= yylex
into verbose mode.
You probably don't need it.
T}
int yylex (void);|T{
.fi
Scans the file
.V= yyin
and for each word found, returns a non-zero integer code, leaving 
.V= yytext
to point at the word.
It returns 0 at end of file.
T}
int yylineno;|T{
.fi
is used by
.V= yylex
to keep track of the current line number,
which is useful to you in error reporting.
It needs to be reset to 1 before beginning a scan.
T}
void yycleanup (void);|T{
.fi
Cleans up the buffers allocated by
.V= yylex
and releases their storage.
This is called only when
.V= yylex
is no longer needed.
T}
.TE
.FG "Interface to the function \f[CB]yylex()\f[P]" "" 0 YYLEX
\&
.DE
.H 1 "Survey of the code"
Study the existing code, which is a partial implementation of your
program.
There are several modules and other files,
most with a separate
.V= \&.h
and
.V= \&.c
file.
.ALX i ()
.LI
The default dictionary really ought to be
.V= /usr/share/dict/words ,
and would actually be in a real implementation,
however it is very large on Linux,
so a smaller dictionary was copied from a Solaris machine.
Using the smaller dictionary will allow you to test your program
without needing to use a very large amount of memory,
expecially when debugging.
See the output of
.V= wc (1)\(::
.VTCODE* 1 "  25143   25143  206663 cmps012b-wm/usr/dict/words"
.VTCODE* 1 " 479623  479623 4950996 /usr/share/dict/words"
.LI
.V= Makefile
contains the usual building information.
.V= Makefile.deps
is a generated file which lists the dependencies.
It must be regenerated any time there is a change to any
.V= #include 
statement in your program.
.LI
The program
.V= pspell.perl
is a reference implementation,
but does  not contain debug switches.
.LI
The module
.V= debugf
contains some useful utility functions which are generally
useful for debugging.
See
.V= debugf.h
for a description of each function.
.LI
The module
.V= hashset
will require the most work.
A stub has been provided,
along with a hashing function
.V= strhash .
You will need to add functions that print out the required debugging
and also replace the calls to
.V= STUBPRINTF
or
.V= DEBUGF
with working code.
.LI
The file
.V= scanner.l
contains a scanner which reads words from the files to be tested.
You need not understand exactly how this works,
just how to call it to extract words.
The file
.V= yyextern.h
has definitions of the files in the program generated by the scanner.
See Figure \*[Figure_YYLEX] for a description of the variables.
.LI
The main program,
.V= spellchk ,
will scan the options, load the dictionaries,
and then do the spell checking.
.LE
.SP
.H 1 "Implementation \[em] Loading the dictionaries"
Before implementing the hash sets,
the dictionaries must be loaded into memory.
.ALX i ()
.LI
There are two dictionaries to be loaded.
Look for the stub which prints the message
``Load dictionaries''.
Replace this with a loop that loads the dictionaries into the
hash set.
.LI
The variables
.V= default_dictionary
and
.V= user_dictionary
contain, respectively, the names of the default and user dictionaries.
A null value indicates that the dictionary should not be loaded.
Print an error message and stop if neither dictionary is present.
.LI
Create a
.V= hashset
and iterate over each dictionary.
Read each line using
.V= fgets (3c)
and chomp off the trailing
newline character.
Then call
.V= put_hashset
with each word.
.LI
Test your program.
Use
.V= "valgrind"
to find problems with uninitialized pointers and other bad memory
references.
Ignore any complaints it makes about memory leak.
Fix any problems with segmentation faults or bus errors or other
problems reported by
.V= valgrind
and
.V= gdb .
.LE
.H 1 "Implementation \[em] The hash set"
Allocation and freeing of the hash set has been implement,
but not insertion and searching.
.ALX i ()
.LI
A function
.V= strhash
has been provided which takes a string and, using Horner's method,
iterates over the string to compute
$ sum from { i = 0 } to { n - 1 }
c sub i times 65599 sup { n - i - 1 } $
where $c$ is the integer coded value for each character in the string.
Since overflow happens with longer words,
we avoid negative numbers by using the defined data type
.V= size_t ,
which is defined to be an unsigned 64-bit integer.
You must declare any variable that is the result of the function
.V= strhash
of this type, and not
.V= int .
.LI
To search the hash set,
compute the hash code first,
then take it remainder the size of the array\(::
.VINDENT* "hash_index = strhash (word) % hashset->size;"
Then use that index to choose a particular hash chain
and perform a linear search down that hash chain using
.V= strcmp (1)
until you find equality or run off the end of the chain.
.LI
Note that searching the chain is
.E= *not*
an $ O ( n ) $
operation, because we consider $n$ to be the total number of
elements in the has set.
If there are $k$ hash chains, then on the average,
each chain will be about $ O ( n / k ) $ in length.
If each chain is about the same length and $ n <= k / 2 $,
this works out to be $ O ( 1 ) $.
.LI
To put a new word into the hash set,
first hash it, and then search exactly as you did for
.V= has_hashset .
If the word is found and already there,
.E= "do not"
insert it\(;;
just return.
If you find a null pointer before finding the word,
store the address of the word in the hash set
by prepending it to the particular hash chain.
.LI
At any time if the 
.V= "load * 2 > size"
(the number of words in the hash set is more than a half the size
of the array),
perform array doubling.
A hash modulus works better when it is not a power of two,
but $ 2 sup k - 1 $ works fine,
where $k$ is a small positive integer,
which is why the initial size was 15.
To double the array, the new size should be $ 2 n + 1 $ if
the previous size was $ n $.
This means that the sequence of sizes is
.nr size 15
.nr max 479623*4
.while \n[size]<\n[max] \{ .\"
.   nop \n[size],
.   nr size \n[size]*2+1
.\}
etc.
.br
.ne 14
.LI
To perform doubling, use the following pseudocode\(::
.DS
.ft CR
   allocate a new array and set all its pointers to NULL
   for each entry in the old array\(::
      while that entry is not null\(::
         pop the hash node from the front of the list
         recompute the hash number and hash index for the new array
         push the hash node onto that index of the new array
   free the old array
   point the struct hash at the new array
.DE
Note that initial insertion does a
.V= strdup (3c),
but here, only the pointer is copied.
.LI
Implement the debugging requirements.
For the 
.V= -x
option given once,
print out a table like the following,
with numbers actually gleaned from the hash table.
.DS
.ft CR
     25143 words in the hash set
     65535 size of the hash array
     24802 chains of size  1
       100 chains of size  2
        40 chains of size  3
         3 chains of size  7
.DE
A cluster is any run of adjacent non-null pointers.
Print out a cluster message for each different number of cluster
sizes.
This verifies that your hash table is reasonably implemented.
.LI
If the
.V= -x
option is specified more than once,
follow this clustering information with an actual dump of the
hash set,
printing out each entry with subscript,
hash code, and string.
For elements of the same chain,
print out the subscript only once.
Print out only those entries that are not null.
For example\(::
.VINDENT* "array[        20] =      2489332 \[Dq]foobar\[Dq]"
.VINDENT* "                  =   2872521232 \[Dq]testing\[Dq]"
.VINDENT* "array[        24] =      3482567 \[Dq]quux\[Dq]"
This indicates that chain 20 has ``foobar'' and ``testing'',
and that chain 24 has ``quux''.
Use the format string
.VINDENT* "\[Dq]array[%10d] = %12u \[rs]\[Dq]%s\[rs]\[Dq]\[rs]n\[Dq]"
for the first item on a chain, and a similar format without the
array index for the other items.
Neatly align everything in vertical columns.
.LE
.H 1 "Implementation \[em] The final stages"
At this point the program is almost complete.
A few more things need to be done.
.ALX i ()
.LI
The scanner
.V= scanner.l
is written in the 
.V= flex
language and extracts words from a file that has been opened for the 
.V= FILE*
variable
.V= yyin .
It is used to generate the C module
.V= scanner.c ,
the contents of which you do not need to read.
Just treat it like any other library module.
.LI
Implement the function
.V= spellcheck
so that for each word that is found,
the word is looked up in the dictionary.
If it is not found, convert the word to lower case
.=V ( tolower (3c)),
and then look it up again.
This is done so that capitalized words,
such as at the beginning of a sentence,
will be found.
Proper names in the dictionaries are given in upper case,
so will not be found if spelled in lower case.
.LI
Make sure the exit status of the program is correct as defined in the
man page at the beginning of this document.
Run
.V= gdb
and
.V= "valgrind"
to verify that you have no memory problems.
.LI
If you have time,
eliminate memory leak by freeing up all of storage.
Check the errors file generated by
.V= valgrind .
.LI
Use
.V= checksource
and
.V= lint
to verify good coding style.
Read
.V= Coding-style/ .
.LE
.H 1 "What to submit"
.V= README ,
.V= Makefile ,
.V= debugf.h ,
.V= hashset.h ,
.V= strhash.h ,
.V= yyextern.h ,
.V= debugf.c ,
.V= hashset.c ,
.V= spellchk.c ,
.V= strhash.c ,
.V= scanner.l .
Do not submit the file
.V= scanner.c ,
which will be created when 
.V= gmake
is run.
Do not submit any files that are built by
.V= gmake .
Verify that the 
.V= submit
target in the 
.V= Makefile
is in fact correct and really does submit all files
needed to build the target and does not submit any files that
need to be generated.
If you are doing pair programming,
carefully follow the instructions in
.V= /afs/cats.ucsc.edu/courses/cmps012b-wm/Syllabus/pair-programming/ .
.FINISH
@


1.21
log
@-
@
text
@d6 1
a6 1
.RCS "$Id: asg4c-spellchk-hash.mm,v 1.20 2014-03-05 19:29:22-08 - - $"
d398 2
a399 2
but $ 2 sup i - 1 $ works fine,
where $i$ is a small positive integer,
@


1.20
log
@-
@
text
@d6 1
a6 1
.RCS "$Id: asg4c-spellchk-hash.mm,v 1.19 2014-03-05 19:28:45-08 - - $"
d398 2
a399 1
but $ 2 sup n - 1 $ works fine,
@


1.19
log
@-
@
text
@d6 1
a6 1
.RCS "$Id: asg4c-spellchk-hash.mm,v 1.18 2014-03-05 19:27:52-08 - - $"
d398 1
a398 1
but $ 2 sup n +- 1 $ works fine,
@


1.18
log
@-
@
text
@d6 1
a6 1
.RCS "$Id: asg4c-spellchk-hash.mm,v 1.17 2014-03-05 19:26:39-08 - - $"
d404 1
a404 1
.nr max 479623*2
@


1.17
log
@-
@
text
@d6 1
a6 1
.RCS "$Id: asg4c-spellchk-hash.mm,v 1.16 2014-02-21 17:56:49-08 - - $"
d404 1
a404 1
.nr max 25143*4
@


1.16
log
@-
@
text
@d6 1
a6 1
.RCS "$Id: asg4c-spellchk-hash.mm,v 1.15 2014-02-21 16:45:09-08 - - $"
d351 1
a351 1
c sub i times 31 sup { n - i - 1 } $
d355 2
a356 2
.V= hashcode_t ,
which is defined to be an unsigned 32-bit integer.
@


1.15
log
@-
@
text
@d4 1
d6 1
a6 1
.RCS "$Id: asg4c-spellchk-hash.mm,v 1.14 2013-05-23 15:40:38-07 - - $"
@


1.14
log
@-
@
text
@d4 2
a5 2
.TITLE CMPS-012B Spring\~2013 Program\~5 "Hashing and Spell Checking"
.RCS "$Id: asg4c-spellchk-hash.mm,v 1.13 2013-05-23 15:38:43-07 - - $"
@


1.13
log
@-
@
text
@d5 1
a5 1
.RCS "$Id: asg4c-spellchk-hash.mm,v 1.12 2013-05-22 12:12:59-07 - - $"
d364 1
a364 1
.VINDENT* "hash_index = strhash (word) % hashset->length;"
d392 2
a393 2
.V= "load * 2 > length"
(the number of words in the hash set is more than a half the length
@


1.12
log
@-
@
text
@d5 1
a5 1
.RCS "$Id: asg4c-spellchk-hash.mm,v 1.11 2013-05-21 19:56:26-07 - - $"
d363 1
a363 1
then take it remainder the length of the array\(::
d437 2
a438 2
    176001 length of the hash array
     25000 chains of size  1
@


1.11
log
@-
@
text
@d5 1
a5 1
.RCS "$Id: asg4c-spellchk-hash.mm,v 1.10 2013-05-21 19:54:18-07 - - $"
d393 1
a393 1
(the number of words in the hash set is more than a quarter the length
@


1.10
log
@-
@
text
@d5 1
a5 1
.RCS "$Id: asg4c-spellchk-hash.mm,v 1.9 2013-05-21 19:52:53-07 - - $"
d370 10
@


1.9
log
@-
@
text
@d5 1
a5 1
.RCS "$Id: asg4c-spellchk-hash.mm,v 1.8 2013-05-21 19:51:17-07 - - $"
d16 1
a16 2
Collision resolution will be done by linear probing rather than
chaining.
d455 1
a455 1
.VINDENT* "array[%10d] = %12u \[rs]\[Dq]%s\[rs]\[Dq]\[rs]n"
@


1.8
log
@-
@
text
@d5 1
a5 1
.RCS "$Id: asg4c-spellchk-hash.mm,v 1.7 2013-05-21 19:44:38-07 - - $"
d400 2
d405 9
a413 8
.RBCODE* 1 "allocate a new array and set all its pointers to NULL"
.RBCODE* 1 "for each entry in the old array\(::"
.RBCODE* 2 "while that entry is not null\(::"
.RBCODE* 3 "pop the hash node from the front of the list"
.RBCODE* 3 "recompute the hash number and hash index for the new array"
.RBCODE* 3 "push the hash node onto that index of the new array"
.RBCODE* 1 "free the old array"
.RBCODE* 1 "point the struct hash at the new array"
@


1.7
log
@-
@
text
@d5 1
a5 1
.RCS "$Id: asg4c-spellchk-hash.mm,v 1.6 2013-05-21 19:33:54-07 - - $"
a411 2


d442 5
a446 1
hash code, and string, as with the line
d448 4
a451 1
Print out only those entries that are not null.
d454 3
@


1.6
log
@-
@
text
@d5 1
a5 1
.RCS "$Id: asg4c-spellchk-hash.mm,v 1.5 2013-02-22 12:53:01-08 - - $"
d234 2
a235 2
.ALX 1 ()
.GKLI
d248 1
a248 1
.GKLI
d256 1
a256 1
.GKLI
d261 1
a261 1
.GKLI
d269 1
a269 1
.GKLI
d282 1
a282 1
.GKLI
d292 1
a292 1
.GKLI
d302 2
a303 2
.ALX 1 ()
.GKLI
d309 1
a309 1
.GKLI
d317 1
a317 1
.GKLI
d328 1
a328 1
.GKLI
d344 2
a345 2
.ALX 1 ()
.GKLI
d361 1
a361 1
.GKLI
d365 6
a370 12
.VINDENT* "starting_index = strhash (word) % hashset->length;"
.GKLI
Starting from the index thus given,
search forward using linear probing of successive elements of
the array (use
.V= strcmp (3c))
until you find a null pointer or an equality.
The array is to be considered circular,
so after looking at the last element of an array,
wrap around to element 0 of the array.
Make sure you don't have an infinite loop.
.GKLI
d372 1
a372 1
first hash it, and then search forward exactly as you did for
d379 3
a381 2
store the address of the word in the hash set.
.GKLI
d383 1
a383 1
.V= "load * 4 > length"
d400 14
a413 9
.GKLI
To perform doubling,
allocate new array,
then iterate over the old array,
recompute the hash number modulo the new size,
and insert it into the new array.
After this is done
.V= free (3c)
the old array.
d417 1
a417 1
.GKLI
d437 1
a437 1
.GKLI
d453 2
a454 2
.ALX 1 ()
.GKLI
d467 1
a467 1
.GKLI
d480 1
a480 1
.GKLI
d488 1
a488 1
.GKLI
d493 1
a493 1
.GKLI
@


1.5
log
@-
@
text
@d4 2
a5 2
.TITLE CMPS-012B Winter\~2013 Program\~5 "Hashing and Spell Checking"
.RCS "$Id: asg4c-spellchk-hash.mm,v 1.4 2012-11-16 21:24:29-08 - - $"
d428 4
a431 4
     25000 clusters of size  1
       100 clusters of size  2
        40 clusters of size  3
         3 clusters of size  7
@


1.4
log
@-
@
text
@d4 2
a5 2
.TITLE CMPS-012B Fall\~2012 Program\~5 "Hashing and Spell Checking"
.RCS "$Id: asg4c-spellchk-hash.mm,v 1.3 2012-11-16 21:23:43-08 - - $"
@


1.3
log
@-
@
text
@d5 1
a5 1
.RCS "$Id: asg4c-spellchk-hash.mm,v 1.2 2012-11-16 18:06:09-08 - - $"
d97 1
a97 1
.VL \n[Pi] "" 0
@


1.2
log
@-
@
text
@d5 1
a5 1
.RCS "$Id: asg4c-spellchk-hash.mm,v 1.1 2012-11-16 18:05:56-08 - - $"
d234 2
a235 2
.ALX i ()
.LI
d248 1
a248 1
.LI
d256 1
a256 1
.LI
d261 1
a261 1
.LI
d269 1
a269 1
.LI
d282 1
a282 1
.LI
d292 1
a292 1
.LI
d302 2
a303 2
.ALX i ()
.LI
d309 1
a309 1
.LI
d317 1
a317 1
.LI
d328 1
a328 1
.LI
d344 2
a345 2
.ALX i ()
.LI
d361 1
a361 1
.LI
d366 1
a366 1
.LI
d376 1
a376 1
.LI
d386 1
a386 1
.LI
d405 1
a405 1
.LI
d417 1
a417 1
.LI
d437 1
a437 1
.LI
d453 2
a454 2
.ALX i ()
.LI
d467 1
a467 1
.LI
d480 1
a480 1
.LI
d488 1
a488 1
.LI
d493 1
a493 1
.LI
@


1.1
log
@-
@
text
@d5 1
a5 1
.RCS "$Id: asg4c-spellchk-hash.mm,v 1.37 2012-02-28 19:03:24-08 - - $"
d7 1
@
