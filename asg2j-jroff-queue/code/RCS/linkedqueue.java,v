head	1.14;
access;
symbols;
locks;
comment	@# @;


1.14
date	2014.02.06.08.34.42;	author -;	state -;
branches;
next	1.13;

1.13
date	2014.02.06.07.56.48;	author -;	state -;
branches;
next	1.12;

1.12
date	2014.02.05.21.43.37;	author -;	state -;
branches;
next	1.11;

1.11
date	2014.02.05.21.41.35;	author -;	state -;
branches;
next	1.10;

1.10
date	2014.02.05.21.39.00;	author -;	state -;
branches;
next	1.9;

1.9
date	2014.02.05.21.33.00;	author -;	state -;
branches;
next	1.8;

1.8
date	2014.02.05.21.32.37;	author -;	state -;
branches;
next	1.7;

1.7
date	2014.02.05.21.31.36;	author -;	state -;
branches;
next	1.6;

1.6
date	2014.02.05.21.31.13;	author -;	state -;
branches;
next	1.5;

1.5
date	2014.02.05.21.24.19;	author -;	state -;
branches;
next	1.4;

1.4
date	2014.02.05.21.23.50;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.02.05.21.14.09;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.02.05.21.08.11;	author -;	state -;
branches;
next	1.1;

1.1
date	2011.01.21.05.05.43;	author -;	state -;
branches;
next	;


desc
@@


1.14
log
@-
@
text
@// Sam Fields sefields
// Sajan Patel savipate
// $Id: linkedqueue.java,v 1.13 2014-02-05 23:56:48-08 - - $

import java.util.NoSuchElementException;
import java.io.*;
import static java.lang.System.*;
import static java.lang.String.*;

class linkedqueue <item_t> {

   public class node{
      item_t item;
      node link;
   }

   //
   // INVARIANT:  front == null && rear == null
   //          || front != null && rear != null
   // In the latter case, following links from the node pointed 
   // at by front will lead to the node pointed at by rear.
   //
   public node front = null;
   private node rear = null;

   public boolean empty (){
      return front == null;
   }

   public void insert (item_t any) {
       //Make a new node a
       node a = new node();
       //a gets any as its value
       a.item = any;
       //a points to nothing
       a.link = null;
       //If the linkedqueue is empty, front gets a
       if (empty()) {
	   front = a;
	   //Otherwise the current rear node points to a...
       } else {
	   rear.link = a;
       }
       //... which is now the rear node
       rear = a;
   }

   public item_t remove (){
       //If queue is empty, nothing to remove
      if (empty ()) throw new NoSuchElementException ();
      //b gets the value of the front node
      item_t b = front.item;
      //If we only have one node , it points to null
      if (front.link == null) {
	  rear.link = null;
      }
      //Other wise front is now gonna be the next node
      front = front.link;
      //And we return the item from the node we just removed
      return b;
   }
}@


1.13
log
@-
@
text
@d1 3
a3 1
// $Id: linkedqueue.java,v 1.12 2014-02-05 13:43:37-08 - - $
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: linkedqueue.java,v 1.11 2014-02-05 13:41:35-08 - - $
a59 19

   public void printparagraph(node curr) {
       StringBuffer words = new StringBuffer();
       int width = 5;
       //Iterate thru the linkedlist that is handed to this func
       while (curr != null) {
	   if (words.length()==0) words.append(curr.item);
	   else if (curr.item.endsWith("%s","!") || curr.item.endsWith("%s",".")) {
		   words.append(curr.item);
		   words.append("  ");
	       }
	   else {
	       words.append(curr.item);
	       words.append(" ");
	   }
	       curr = curr.link;
       }
       out.printf("%s",words);
   }
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: linkedqueue.java,v 1.10 2014-02-05 13:39:00-08 - - $
d67 1
a67 1
	   else if (curr.item.endsWith("!") || curr.item.endsWith(".")) {
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: linkedqueue.java,v 1.9 2014-02-05 13:33:00-08 - - $
d6 1
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: linkedqueue.java,v 1.8 2014-02-05 13:32:37-08 - - $
d66 9
a74 1
	   curr = curr.link;
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: linkedqueue.java,v 1.7 2014-02-05 13:31:36-08 - - $
d68 1
a68 1
       out.printf(words);
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: linkedqueue.java,v 1.6 2014-02-05 13:31:13-08 - - $
d68 1
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: linkedqueue.java,v 1.5 2014-02-05 13:24:19-08 - - $
d65 1
a65 1
	   if (words.length()=0) words.append(curr.item);
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: linkedqueue.java,v 1.4 2014-02-05 13:23:50-08 - - $
d60 1
a60 1
   public void printparagraph(node front) {
d64 4
a67 36
       while (front != null) {
	   //If the linkedqueue is empty append the word
	   if (words.length() == 0) words.append(front.item);
	   else {
	       //If the linkedqueue isn't empty check if
	       //it ends with punctuation. If so append 
	       //the current word and two spaces.
	       if (words.lastIndexOf("!") == words.length()) {
		   if (words.length() + 2 > width) {
		       out.printf("\n");
		       out.printf("%s",words);
		       words.delete(0, words.length());
		       words.append(front.item);
		       words.append("  ");
		   } else if (words.length() +2 < width) {
		       words.append(front.item);
		       words.append(" ");
		   }
	       }
	       //If it doesn't end with punctuation 
	       //append the word and one space.
	       else {
		   if (words.length() + 1 > width) {
		       out.printf("\n");
		       out.printf("%s",words);
		       words.delete(0, words.length());
		       words.append(front.item);
		       words.append(" ");
		   }
		   else if (words.length() + 1 < width) {
		       words.append(front.item);
		       words.append(" ");
		   }
	       }
	   }
	   front = front.link;}
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: linkedqueue.java,v 1.3 2014-02-05 13:14:09-08 - - $
d62 1
a62 1
       int width = 20;
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: linkedqueue.java,v 1.2 2014-02-05 13:08:11-08 - - $
d62 1
a62 1
       int width = 12;
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: linkedqueue.java,v 1.1 2011-01-20 21:05:43-08 - - $
d71 1
a71 1
	       if (words.lastIndexOf(".") == words.length()) {
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: linkedqueue.java,v 1.2 2010-01-20 14:04:03-08 - - $
d4 2
d9 1
a9 1
   private class node{
d20 1
a20 1
   private node front = null;
d28 15
a42 1
      // STUB: Add code here to insert an item_t into the queue.
d46 1
d48 10
a57 2
      // STUB: Add code for remove here.
      return null; // STUB: Delete this return statement.
d60 42
a101 1
}
@
