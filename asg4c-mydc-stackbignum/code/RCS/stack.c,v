head	1.12;
access;
symbols;
locks;
comment	@ * @;


1.12
date	2014.03.04.04.37.35;	author -;	state -;
branches;
next	1.11;

1.11
date	2013.05.16.22.07.42;	author -;	state -;
branches;
next	1.10;

1.10
date	2013.05.16.20.26.00;	author -;	state -;
branches;
next	1.9;

1.9
date	2013.05.09.05.09.41;	author -;	state -;
branches;
next	1.8;

1.8
date	2013.05.09.01.53.30;	author -;	state -;
branches;
next	1.7;

1.7
date	2013.05.08.04.14.09;	author -;	state -;
branches;
next	1.6;

1.6
date	2013.05.02.21.15.47;	author -;	state -;
branches;
next	1.5;

1.5
date	2013.02.19.22.46.04;	author -;	state -;
branches;
next	1.4;

1.4
date	2013.02.19.22.44.03;	author -;	state -;
branches;
next	1.3;

1.3
date	2013.02.19.22.43.38;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.02.19.20.32.38;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.02.16.03.41.09;	author -;	state -;
branches;
next	;


desc
@@


1.12
log
@-
@
text
@// $Id: stack.c,v 1.11 2013-05-16 15:07:42-07 - - $
// Sam Fields sefields

#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "stack.h"
#include "debug.h"

#define DEFAULT_CAPACITY 16

struct stack {
   size_t capacity;
   size_t size;
   stack_item *data;
};

stack *new_stack (void) {
   stack *this = malloc (sizeof (stack));
   assert (this != NULL);
   this->capacity = DEFAULT_CAPACITY;
   this->size = 0;
   this->data = calloc (this->capacity, sizeof (stack_item));
   assert (this->data != NULL);
   return this;
}

void free_stack (stack *this) {
   assert (empty_stack (this));
   free (this->data);
   free (this);
}

static bool full_stack (stack *this) {
   return this->size == this->capacity;
}

static void realloc_stack (stack *this) {
   size_t old_capacity = this->capacity;
   this->capacity *= 2;
   this->data = realloc (this->data, this->capacity);
   memset (this->data + old_capacity, 0, old_capacity);
   assert (this->data != NULL);
}


void push_stack (stack *this, stack_item item) {
  //If the stack is empty, embiggen it
   if (full_stack (this)) realloc_stack (this);
   //Place the new item at the top of the stack
   this->data[this->size] = item;
   this->size++;
}

stack_item pop_stack (stack *this) {
  //Assert the stack has something in it
   assert (! empty_stack (this));
   //And return the top element
   this->size--;
   return this->data[this->size];
}

stack_item peek_stack (stack *this, size_t index) {
   assert (index < size_stack (this));
   return this->data[index];
}

bool empty_stack (stack *this) {
   return size_stack (this) == 0;
}

size_t size_stack (stack *this) {
   return this->size;
}

void show_stack (stack *this) {
   fprintf (stderr, "stack@@%p->{%lu,%lu,%p}\n",
            this, this->capacity, this->size, this->data);
}

@


1.11
log
@-
@
text
@d1 2
a2 1
// $Id: stack.c,v 1.10 2013-05-16 13:26:00-07 - - $
d50 1
d52 3
a54 2
   DEBUGS ('s', show_stack (this));
   DEBUGF ('s', "item=%p\n", item);
d58 1
d60 3
a62 2
   DEBUGS ('s', show_stack (this));
   STUB (return NULL;)
d67 1
a67 2
   DEBUGS ('s', show_stack (this));
   STUB (return NULL;)
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: stack.c,v 1.9 2013-05-08 22:09:41-07 - - $
d40 1
d43 1
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: stack.c,v 1.8 2013-05-08 18:53:30-07 - - $
a58 1
   assert (index >= 0);
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: stack.c,v 1.7 2013-05-07 21:14:09-07 - - $
d40 3
a42 3
   stack->capacity *= 2;
   stack->data = realloc (stack->data, stack->capacity);
   assert (stack->data != NULL);
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: stack.c,v 1.6 2013-05-02 14:15:47-07 - - $
d35 10
d47 1
d58 1
a58 1
stack_item peek_stack (stack *this, int index) {
d69 1
a69 1
int size_stack (stack *this) {
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: stack.c,v 1.5 2013-02-19 14:46:04-08 - - $
d9 1
d11 1
a11 1
typedef struct stack_node stack_node;
d14 1
d16 1
a16 6
   stack_node *top;
};

struct stack_node {
   stack_item item;
   stack_node *link;
d20 7
a26 5
   stack *stack = malloc (sizeof (stack));
   assert (stack != NULL);
   stack->size = 0;
   stack->top = NULL;
   return stack;
d29 4
a32 3
void free_stack (stack *stack) {
   assert (empty_stack (stack));
   free (stack);
d36 3
a38 1
void push_stack (stack *stack, stack_item item) {
d41 4
a44 2
stack_item pop_stack (stack *stack) {
   assert (! empty_stack (stack));
d47 1
a47 1
stack_item peek_stack (stack *stack, int index) {
d49 7
a55 1
   assert (index < size_stack (stack));
d58 2
a59 2
bool empty_stack (stack *stack) {
   return size_stack (stack) == 0;
d62 3
a64 2
int size_stack (stack *stack) {
   return stack->size;
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: stack.c,v 1.4 2013-02-19 14:44:03-08 - - $
a11 3
static char *stack_tag = "struct stack";
static char *stack_node_tag = "struct stack_node";

d13 1
a13 2
   char *tag;
   size_t length;
a17 1
   char *tag;
d23 1
a23 1
   stack *stack = malloc (sizeof (struct stack));
d25 1
a25 2
   stack->tag = stack_tag;
   stack->length = 0;
d31 1
a31 3
   assert (is_stack (stack));
   assert (is_empty_stack (stack));
   memset (stack, 0, sizeof stack);
a36 1
   assert (is_stack (stack));
d40 1
a40 2
   assert (is_stack (stack));
   assert (! is_empty_stack (stack));
a43 1
   assert (is_stack (stack));
d45 1
a45 6
   assert (index < length_stack (stack));
}

bool is_empty_stack (stack *stack) {
   assert (is_stack (stack));
   return length_stack (stack) == 0;
d48 2
a49 3
int length_stack (stack *stack) {
   assert (is_stack (stack));
   return stack->length;
d52 2
a53 2
bool is_stack (stack *stack) {
   return stack != NULL && stack->tag == stack_tag;
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: stack.c,v 1.3 2013-02-19 14:43:38-08 - - $
d43 1
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: stack.c,v 1.2 2013-02-19 12:32:38-08 - - $
d6 1
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: stack.c,v 1.1 2013-02-15 19:41:09-08 - - $
d3 1
d5 1
a5 1
#include <assert.h>
d27 6
a32 1
   return NULL;
d38 2
a48 1
   return NULL;
a54 1
   return NULL;
d59 1
a59 1
   return false;
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: stack.c,v 1.3 2012-03-06 16:27:19-08 - - $
d15 1
d58 1
a58 1
   return 0;
d62 1
a62 1
   return false;
@
