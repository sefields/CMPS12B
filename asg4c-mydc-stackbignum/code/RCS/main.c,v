head	1.9;
access;
symbols;
locks;
comment	@ * @;


1.9
date	2014.03.04.04.37.29;	author -;	state -;
branches;
next	1.8;

1.8
date	2013.05.09.05.09.41;	author -;	state -;
branches;
next	1.7;

1.7
date	2013.05.08.04.14.09;	author -;	state -;
branches;
next	1.6;

1.6
date	2013.05.02.21.15.47;	author -;	state -;
branches;
next	1.5;

1.5
date	2013.02.19.22.39.01;	author -;	state -;
branches;
next	1.4;

1.4
date	2013.02.19.22.35.33;	author -;	state -;
branches;
next	1.3;

1.3
date	2013.02.19.20.36.45;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.02.19.20.31.09;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.02.16.03.41.09;	author -;	state -;
branches;
next	;


desc
@@


1.9
log
@-
@
text
@// $Id: main.c,v 1.8 2013-05-08 22:09:41-07 - - $
// Sam Fields sefields

#include <assert.h>
#include <ctype.h>
#include <libgen.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "bigint.h"
#include "debug.h"
#include "stack.h"
#include "token.h"

void do_push (stack *stack, char *numstr) {
   DEBUGF ('m', "stack=%p, numstr=%p=\"%s\"\n", stack, numstr, numstr);
   bigint *bigint = new_string_bigint (numstr);
   push_stack (stack, bigint);
}

void do_binop (stack *stack, bigint_binop binop) {
   DEBUGS ('m', show_stack (stack));
   bigint *right = pop_stack (stack);
   bigint *left = pop_stack (stack);
   bigint *answer = binop (left, right);
   push_stack (stack, answer);
   free_bigint (left);
   free_bigint (right);
}

void do_clear (stack *stack) {
   DEBUGF ('m', "stack=%p\n", stack);
   while (! empty_stack (stack)) {
      bigint *bigint = pop_stack (stack);
      free_bigint (bigint);
   }
}


void do_print (stack *stack) {
   DEBUGS ('m', show_stack (stack));
   print_bigint (peek_stack (stack, 0), stdout);
}

void do_print_all (stack *stack) {
   DEBUGS ('m', show_stack (stack));
   int size = size_stack (stack);
   for (int index = 0; index < size; ++index) {
      print_bigint (peek_stack (stack, index), stdout);
   }
}

void unimplemented (int oper) {
   printf ("%s: ", program_name);
   if (isgraph (oper)) printf ("'%c' (0%o)", oper, oper);
                  else printf ("0%o", oper);
   printf (" unimplemented\n");
}

void scan_options (int argc, char **argv) {
   opterr = false;
   for (;;) {
      int option = getopt (argc, argv, "@@:");
      if (option == EOF) break;
      switch (option) {
         case '@@': set_debug_flags (optarg);
                   break;
         default : printf ("%s: -%c: invalid option\n",
                           program_name, optopt);
                   break;
      }
   }
}

int main (int argc, char **argv) {
   program_name = basename (argv[0]);
   scan_options (argc, argv);
   stack *stack = new_stack ();
   token *scanner = new_token (stdin);
   for (;;) {
      int token = scan_token (scanner);
      if (token == EOF) break;
      switch (token) {
         case NUMBER: do_push (stack, peek_token (scanner)); break;
         case '+': do_binop (stack, add_bigint); break;
         case '-': do_binop (stack, sub_bigint); break;
         case '*': do_binop (stack, mul_bigint); break;
         case 'c': do_clear (stack); break;
         case 'f': do_print_all (stack); break;
         case 'p': do_print (stack); break;
         default: unimplemented (token); break;
      }
   }
   DEBUGF ('m', "EXIT %d\n", exit_status);
   return EXIT_SUCCESS;
}
@


1.8
log
@-
@
text
@d1 2
a2 1
// $Id: main.c,v 1.7 2013-05-07 21:14:09-07 - - $
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: main.c,v 1.6 2013-05-02 14:15:47-07 - - $
d16 3
a18 12
char *execname = NULL;

bool not_enough (stack *stack, int enough) {
   DEBUGF ('m', "stack=%p, enough=%d\n", stack, enough);
   if (size_stack (stack) >= enough) return true;
   printf ("%s: stack empty\n", execname);
   return false;
}

void do_push (stack *stack, char *yytext) {
   DEBUGF ('m', "stack=%p, yytext=%p=\"%s\"\n", stack, yytext, yytext);
   bigint *bigint = new_string_bigint (yytext);
a23 1
   if (not_enough (stack, 2)) return;
a42 1
   if (not_enough (stack, 1)) return;
d55 1
a55 1
   printf ("%s: ", execname);
d64 1
a64 1
      int option = getopt (argc, argv, "y@@:");
d70 1
a70 1
                           execname, optopt);
d95 1
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: main.c,v 1.5 2013-02-19 14:39:01-08 - - $
d12 1
a12 1
#include "debugf.h"
d32 1
a32 1
   DEBUGF ('m', "stack=%p, binop=%p\n", stack, binop);
d52 1
a52 1
   DEBUGF ('m', "stack=%p\n", stack);
d58 1
a58 1
   DEBUGF ('m', "stack=%p\n", stack);
d78 1
a78 1
         case '@@': set_debugflags (optarg);
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: main.c,v 1.4 2013-02-19 14:35:33-08 - - $
d20 1
a20 1
   if (length_stack (stack) >= enough) return true;
d44 1
a44 1
   while (! is_empty_stack (stack)) {
d59 2
a60 2
   int length = length_stack (stack);
   for (int index = 0; index < length; ++index) {
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: main.c,v 1.3 2013-02-19 12:36:45-08 - - $
a17 2
#define DO_NOTHING(X) {DEBUGF ('s', ""); return X; }

d19 1
a19 1
   DO_NOTHING(false);
d26 1
a26 1
   DO_NOTHING();
d32 1
a32 1
   DO_NOTHING();
d43 1
a43 1
   DO_NOTHING();
d52 1
a52 1
   DO_NOTHING();
d58 1
a58 1
   DO_NOTHING();
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: main.c,v 1.2 2013-02-19 12:31:09-08 - - $
d90 1
a90 2
   execname = basename (argv[0]);
   set_execname (execname);
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: main.c,v 1.1 2013-02-15 19:41:09-08 - - $
d29 1
a29 1
   bigint *bigint = new_bigint_string (yytext);
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: main.c,v 1.3 2012-03-06 16:27:19-08 - - $
d56 1
a56 1
   print_bigint (peek_stack (stack, 0));
d63 1
a63 1
      print_bigint (peek_stack (stack, index));
@
