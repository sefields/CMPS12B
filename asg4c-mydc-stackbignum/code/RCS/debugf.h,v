head	1.2;
access;
symbols;
locks;
comment	@ * @;


1.2
date	2013.02.19.22.35.33;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.02.16.03.41.09;	author -;	state -;
branches;
next	;


desc
@@


1.2
log
@-
@
text
@// $Id: debugf.h,v 1.1 2013-02-15 19:41:09-08 - - $

#ifndef __DEBUGF_H__
#define __DEBUGF_H__

//
// DESCRIPTION
//    Debugging library containing miscellaneous useful things.
//

//
// Program name and exit status.
//
extern char *program_name;
extern int exit_status;

//
// Support for stub messages.
//
#define STUBPRINTF(...) \
        __stubprintf (__FILE__, __LINE__, __func__, __VA_ARGS__)
void __stubprintf (char *file, int line, const char *func,
                   char *format, ...);

//
// Debugging utility.
//

void set_debugflags (char *flags);
   //
   // Sets a string of debug flags to be used by DEBUGF statements.
   // Uses the address of the string, and does not copy it, so it
   // must not be dangling.  If a particular debug flag has been set,
   // messages are printed.  The format is identical to printf format.
   // The flag "@@" turns on all flags.
   //

#ifdef NDEBUG
#define DEBUGF(FLAG,...) // DEBUG (FLAG, __VA_ARGS__)
#else
#define DEBUGF(FLAG,...) \
        __debugprintf (FLAG, __FILE__, __LINE__, __func__, __VA_ARGS__)
void __debugprintf (char flag, char *file, int line, const char *func,
                    char *format, ...);
#endif

#endif

@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: debugf.h,v 1.1 2012-03-05 19:43:01-08 - - $
d12 1
a12 1
// Tell debugf what program is running.
d14 2
a15 1
void set_execname (char *name);
@
