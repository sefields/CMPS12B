head	1.6;
access;
symbols;
locks;
comment	@ * @;


1.6
date	2014.01.25.02.33.47;	author -;	state -;
branches;
next	1.5;

1.5
date	2013.05.09.01.53.30;	author -;	state -;
branches;
next	1.4;

1.4
date	2013.05.08.04.14.09;	author -;	state -;
branches;
next	1.3;

1.3
date	2013.05.04.02.33.54;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.05.02.21.15.47;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.02.16.03.41.09;	author -;	state -;
branches;
next	;


desc
@@


1.6
log
@-
@
text
@// $Id: stack.h,v 1.5 2013-05-08 18:53:30-07 - - $

#ifndef __STACK_H__
#define __STACK_H__

#include <stdbool.h>
#include "bigint.h"

typedef struct stack stack;
typedef bigint *stack_item;

//
// Create a new empty stack.
//
stack *new_stack (void);

//
// Free up the stack.
// Precondition: stack must be empty.
//
void free_stack (stack*);

//
// Push a new stack_item onto the top of the stack.
//
void push_stack (stack *, stack_item);

//
// Pop the top stack_item from the stack and return it.
//
stack_item pop_stack (stack*);

//
// Peek into the stack and return a selected stack_item.
// Item 0 is the element at the top.
// Item size_stack - 1 is the element at the bottom.
// Precondition: 0 <= index && index < size_stack.
//
stack_item peek_stack (stack *, size_t index);

//
// Indicate whether the stack is empty or not.
// Same as size_stack == 0.
//
bool empty_stack (stack*);

//
// Return the current size of the stack (number of items on the stack).
//
size_t size_stack (stack*);

//
// Print part of the stack in debug format.
//
void show_stack (stack*);

#endif

@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: stack.h,v 1.4 2013-05-07 21:14:09-07 - - $
a6 1

d21 1
a21 1
void free_stack (stack *);
d31 1
a31 1
stack_item pop_stack (stack *);
d45 1
a45 1
bool empty_stack (stack *);
d50 1
a50 1
size_t size_stack (stack *);
d55 1
a55 1
void show_stack (stack *);
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: stack.h,v 1.3 2013-05-03 19:33:54-07 - - $
d40 1
a40 1
stack_item peek_stack (stack *, int index);
d51 1
a51 1
int size_stack (stack *);
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: stack.h,v 1.2 2013-05-02 14:15:47-07 - - $
d53 5
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: stack.h,v 1.1 2013-02-15 19:41:09-08 - - $
d44 1
d49 1
a49 1
// Return a count of the number of items on the stack.
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: stack.h,v 1.1 2012-03-05 19:43:01-08 - - $
d35 4
a38 4
// Peek into the stack and return a selected stack_item, with
// item 0 being the element at the top.
// and item length_stack - 1 being the element at the bottom.
// Precondition: 0 <= index && index < length_stack.
d45 1
a45 1
bool is_empty_stack (stack *);
d50 1
a50 6
int length_stack (stack *);

//
// Indixate whether or not a pointer points at a stack.
//
bool is_stack (stack *);
@
