head	1.6;
access;
symbols;
locks;
comment	@# @;


1.6
date	2014.01.22.07.45.23;	author -;	state -;
branches;
next	1.5;

1.5
date	2014.01.22.07.32.13;	author -;	state -;
branches;
next	1.4;

1.4
date	2014.01.22.03.20.42;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.01.20.00.18.58;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.09.24.21.38.16;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.09.24.21.36.52;	author -;	state -;
branches;
next	;


desc
@@


1.6
log
@-
@
text
@// $Id: jfmt.java,v 1.5 2014-01-21 23:32:13-08 - - $
//
// Sam Fields sefields
// 
// Name: Asg 1 jfmt
//

import java.io.*;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;
import static java.lang.System.*;

class jfmt {
   // Static variables keeping the general status of the program.
   public static final String JAR_NAME = get_jarname();
   public static final int EXIT_SUCCESS = 0;
   public static final int EXIT_FAILURE = 1;
   public static int exit_status = EXIT_SUCCESS;
    public static int width = 65;

   // A basename is the final component of a pathname.
   // If a java program is run from a jar, the classpath is the
   // pathname of the jar.
   static String get_jarname() {
      String jarpath = getProperty ("java.class.path");
      int lastslash = jarpath.lastIndexOf ('/');
      if (lastslash < 0) return jarpath;
      return jarpath.substring (lastslash + 1);
   }


   // Formats a single file.
    static void format (Scanner infile) {
List<String> words = new LinkedList<String>();
      // This for loop reads in a line at a time from the file...
      for (int linenr = 1; infile.hasNextLine(); ++linenr) {
         String line = infile.nextLine(); 
         //... splits the line into words around white space...
         for (String word: line.split("\\s+")) {
         //... and adds each word to words,
         //provided the word isn't empty.
          if (word.length() == 0) continue;
          words.add(word);
        }
      }
      //Now print the words
      print_paragraph(words);
    }

    public static void print_paragraph(List<String> words) {
       //Start printing on a newline
       out.printf("%n");
       //charCount will keep track of number of characters on each line
       int charCount = 0;
       //Iterate through each word on the list
       for (String word : words) {
           //If we are on a new line, print the word 
           //with no space before, and increment charCount
          if (charCount == 0) {
            out.printf(word);
            charCount = word.length();
            //Otherwise increment charCount for a space
            //and the word...
           } else {
            charCount += 1 +word.length();
            //...and if printing that space and word will
            //exceed width limit, print a newline, the word,
            //and reset charCount...
              if (charCount > width) {
              out.printf("%n"+word);
              charCount = word.length();
              //...and if printing that space and word
              //won't exceed width limit, do it on this line.
           } else {
              out.printf(" " + word);
             }
          }
       }
       //If charCount exceeds the width limit, start a new line
       if (charCount > 0) {
           out.printf("%n");
       }
       //At the end, clear the linked list
       words.clear();
    }


   // Main function scans arguments and opens/closes files.
   public static void main (String[] args) {
         if (args.length == 0) {
         // There are no filenames given on the command line.
         format (new Scanner (in)); 
        } else {
       //There are arguments on the command line. Set argix=0,
       //the index of the first argument.
       int argix = 0;
       //If this first arguments starts with "-" and has length
       //greater than 1, then this is presumably an integer.
       //It is handed to width after going through parseInt and
       //being multiplied by -1.
       if (args[0].startsWith("-") && args[0].length() >1) {
             width = Integer.parseInt(args[0])*-1;
               argix = 1;
           
           }
         // Iterate over each filename given on the command line.
             for (; argix < args.length; ++argix) {
            String filename = args[argix];
            if (filename.equals ("-")) {
               format (new Scanner (in));
            }else {
               // Open the file and read it, or error out.
               try {
                  Scanner infile = new Scanner (new File (filename));
                  format (infile);
                  infile.close();
               }catch (IOException error) {
                  exit_status = EXIT_FAILURE;
                  err.printf ("%s: %s%n", JAR_NAME,
                              error.getMessage());
               }
            }
             }
        }
      exit (exit_status);
   }
}
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: jfmt.java,v 1.4 2014-01-21 19:20:42-08 - - $
d60 1
a60 1
           //and increment charCount
d64 2
a65 2
            //Otherwise increment charCount for the word
            //and a space...
d68 1
a68 1
            //...and if printing that word and space will
d70 1
a70 1
            //and reset charCount.
d74 1
a74 1
              //...and if printing that word and space
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: jfmt.java,v 1.2 2013-09-24 14:38:16-07 - - $
d3 3
a5 5
// Starter code for the jfmt utility.  This program is similar
// to the example code jcat.java, which iterates over all of its
// input files, except that this program shows how to use
// String.split to extract non-whitespace sequences of characters
// from each line.
d36 1
a36 1
	List<String> words = new LinkedList<String>();
d40 7
a46 7
	 //... splits the line into words around white space...
	 for (String word: line.split("\\s+")) {
	     //... and adds each word to words,
	     //provided the word isn't empty.
	     if (word.length() == 0) continue;
	     words.add(word);
 }
d53 34
a86 32
	//Start printing on a newline
	out.printf("%n");
	//charCount will keep track of number of characters on each line
	int charCount = 0;
	//Iterate through each word on the list
	for (String word : words) {
	    //If we are on a new line, print the word 
	    //and increment charCount
	    if (charCount == 0) {
		out.printf(word);
		charCount = word.length();
		//Otherwise increment charCount for the word
		//and a space...
	    } else {
		charCount += 1 +word.length();
		//...and if printing that word and space will
		//exceed width limit, print a newline, the word,
		//and reset charCount.
		if (charCount > width) {
		    out.printf("%n"+word);
		    charCount = word.length();
		    //...and if printing that word and space
		    //won't exceed width limit, do it on this line.
		} else {
		    out.printf(" " + word);
		}
	    }
	}
	if (charCount > 0) {
	    out.printf("%n");
	}
	words.clear();
d95 13
a107 13
	 } else {
	  //There are arguments on the command line. Set argix=0,
	  //the index of the first argument.
	  int argix = 0;
	  //If this first arguments starts with "-" and has length
	  //greater than 1, then this is presumably an integer.
	  //It is handed to width after going through parseInt and
	  //being multiplied by -1.
	  if (args[0].startsWith("-") && args[0].length() >1) {
		  width = Integer.parseInt(args[0])*-1;
		  argix = 1;
	      
	      }
d109 1
a109 1
	      for (; argix < args.length; ++argix) {
d125 2
a126 2
	      }
	 }
d129 1
a129 1
}@


1.3
log
@-
@
text
@d23 1
d39 1
a39 2
      // Read each line from the opened file, one after the other.
      // Stop the loop at end of file.
d42 10
a51 21
	 if (linenr == 1 && line.isEmpty()) {
	     continue; //This says that if the first word is empty, skip it
	 }
	 words.add(line); //This adds each line to words as it goes thru

         /* Split the line into words around white space and iterate
         // over the words.
         for (String word: words.getFirst().split("\\s+")) {

            // Skip an empty word if such is found.
            if (word.length() == 0) continue;
            out.printf ("%n just added" + word);
            // Append the word to the end of the linked list.
            words.add(word);
	    //Remove the full line that was being iterated through
	    out.printf("removing" + words.getFirst());
	    words.removeFirst(); 

	    } */
	 out.printf("%n"+words);      }
      out.printf("THE LIST IS NOW POPULATED WITH LINES.");
d54 26
a79 3
    /*    public static void print_paragraph() {
	for (String word: words) {
	    System.out.print(word + "\\s+");
d81 7
a87 1
		} */
a91 2
       System.out.print("diddly boop");
       int width = 65;
a93 1
         out.printf ("FILE: -%n");
a105 1
		  System.out.print("WIDTH IS " + width);
a111 2
               // Treat a filename of "-" to mean System.in.
               out.printf ("FILE: -%n");
a116 1
                  out.printf ("FILE: %s%n", filename);
d125 2
a126 2
         }
      }
d129 1
a129 2

}
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: jfmt.java,v 1.1 2013-09-24 14:36:52-07 - - $
d11 1
d36 2
a37 1
   static void format (Scanner infile) {
d41 5
a45 2
         String line = infile.nextLine();
         out.printf ("line %3d: [%s]%n", linenr, line);
d47 1
a47 4
         // Create a LinkedList of Strings.
         List<String> words = new LinkedList<String>();

         // Split the line into words around white space and iterate
d49 1
a49 1
         for (String word: line.split ("\\s+")) {
d53 1
a53 1
            out.printf ("...[%s]%n", word);
d55 15
a69 10
            words.add (word);

         }
         out.printf ("list:");

         // Use iterator syntax to print out all of the words.
         for (String word: words) out.printf (" %s", word);
         out.printf ("%n");
      }
   }
d74 3
a76 1
      if (args.length == 0) {
d79 15
a93 2
         format (new Scanner (in));
      }else {
d95 1
a95 1
         for (int argix = 0; argix < args.length; ++argix) {
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: jfmt.java,v 1.1 2012-01-05 18:38:44-08 - - $
d18 1
a18 1
   public static final String JAR_NAME = get_jarname ();
d26 1
a26 1
   static String get_jarname () {
d38 2
a39 2
      for (int linenr = 1; infile.hasNextLine (); ++linenr) {
         String line = infile.nextLine ();
d43 1
a43 1
         List<String> words = new LinkedList<String> ();
d50 1
a50 1
            if (word.length () == 0) continue;
d85 1
a85 1
                  infile.close ();
d89 1
a89 1
                              error.getMessage ());
@
